package main

import ( "fmt" ; "time" )

func second ( x int ) {

    if x > 2 { fmt.Println ( "x is " , x , " on foo" ) }
}

func main () {

    x := 1

    fmt.Println ( "x is " , x , " on main" )

    x = 2
    
    fmt.Println ( "x is " , x , " on main" )
    
    x = 3
    
    fmt.Println ( "x is " , x , " on main" )
    
    time.Sleep ( 1 * time.Second ) // it not usable as fix for each run, because main is very fast.

    go second ( x )
    
    // time.Sleep ( 1 * time.Second ) // usable as first fix, but it's a wrong way to proceed!
    
    x = 4
    
    fmt.Println ( "x is " , x , " on main" )

    x = 5
    
    fmt.Println ( "x is " , x , " on main" )
}

/*
   Explanation of 'Race Condition' error in Concurrency:

        The race condition is generated by these two tasks ( main function and second function ) ,
        because the task 2 (second function) was written without considering the non-deterministic order of execution.
        
        It could be adjusted using communication on both,
        for example using a database or simply using the simplest built-in functions already written in Go.
*/

